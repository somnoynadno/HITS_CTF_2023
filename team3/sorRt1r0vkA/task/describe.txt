33. Search in Rotated Sorted Array
Medium
21K
1.3K
Companies
There is an integer array nums sorted in ascending order
 (with distinct values).

Prior to being passed to your function, nums is possibly 
rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., 
nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 
3 and become [4,5,6,7,0,1,2].
33. Search in Rotated Sorted Array
Medium
21K
1.3K
Companies
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104
Given the array nums after the possible rotation and an integer
 target, return the index of target if it is in nums, or -1 if 
 it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-10^4 <= target <= 10^4





3. Поиск в повернутом отсортированном массиве
Средний
21 КБ
1.3K
Компании
Существует массив целых чисел, nums отсортированных в порядке возрастания (с различными значениями).

Перед передачей вашей функции он, nums возможно, поворачивается с неизвестным сводным индексом k (1 <= k < nums.length) таким образом, что результирующий массив имеет [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-индексированный). Например, [0,1,2,4,5,6,7] может быть повернут по сводному индексу 3 и стать [4,5,6,7,0,1,2].

Учитывая массив nums после возможного поворота и целое число target, верните индекс target, если он находится в nums или -1 если его нет в nums.

Вы должны написать алгоритм со O(log n) сложностью во время выполнения.

 

Пример 1:

Входные данные: числа = [4,5,6,7,0,1,2], цель = 0
Результат: 4
Пример 2:

Входные данные: числа = [4,5,6,7,0,1,2], цель = 3
Результат: -1
Пример 3:

Входные данные: nums = [1], target = 0
Результат: -1
 

Ограничения:

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
Все значения nums являются уникальными.
nums это массив по возрастанию, который возможно поворачивать.
-10^4 <= target <= 10^4